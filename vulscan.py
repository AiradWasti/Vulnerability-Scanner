#!/usr/bin/python
import socket
import os
import sys
import threading
import logging

# Setup logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def retBanner(ip, port):
    try:
        socket.setdefaulttimeout(2)
        s = socket.socket()
        s.connect((ip, port))
        banner = s.recv(1024).decode('utf-8', 'ignore').strip()
        s.close()
        if banner:
            logging.info(f"Banner from {ip}:{port} - {banner}")
        return banner
    except socket.timeout:
        logging.error(f"Error connecting to {ip}:{port} - timed out")
    except ConnectionRefusedError:
        logging.error(f"Error connecting to {ip}:{port} - Connection refused")
    except Exception as e:
        logging.error(f"Error connecting to {ip}:{port} - {e}")
    return None

def checkVulns(banner, filename):
    try:
        with open(filename, "r") as f:
            for line in f.readlines():
                if line.strip() in banner:
                    logging.warning(f"Server is vulnerable: {banner}")
    except Exception as e:
        logging.error(f"Error reading {filename} - {e}")

def scanPort(ip, portlist, filename):
    for port in portlist:
        banner = retBanner(ip, port)
        if banner:
            logging.info(f"{ip}/{port}: {banner}")
            checkVulns(banner, filename)

def main():
    if len(sys.argv) != 2:
        print("Usage: " + str(sys.argv[0]) + " <vuln filename>")
        exit(0)

    filename = sys.argv[1]
    if not os.path.isfile(filename):
        logging.error("File doesn't exist!")
        exit(0)
    if not os.access(filename, os.R_OK):
        logging.error("Access denied")
        exit(0)

    ip = input("Enter Target IP: ")
    portlist = [21, 22, 25, 80, 110, 443, 445]

    threads = []
    for _ in range(1):  # You can adjust this to scan multiple IPs if needed
        t = threading.Thread(target=scanPort, args=(ip, portlist, filename))
        threads.append(t)
        t.start()

    for t in threads:
        t.join()

if __name__ == '__main__':
    main()
